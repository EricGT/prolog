# cclab - A temporary pack for playing with delimited continuations

This package explores a few ways of working with SWI Prolog's delimited continuations
(reset/1 and shift/1) and some applications, including tabling.

There are some experimental libraries in the prolog directory:

	delimcc - 3 alternative interfaces to shift and reset
	ccstate - Backtrackable state as a control effect reified as DCG goal.
	          Hygienic nonbacktrackable state using nb_setval and nb_getval.
	cclistm - Nondeterminism reified as a list (like Haskell List monad)
	lambda1 - Lightweight lambdas
	lambda2 - Lightweight lambdas, different operator precedences

There are three subdirectories:

	ccmisc - Initial experiments with combining statefulness and nondetermism effects
	cclazy - Memoisation, nondeterminism and probabilistic choice reified as lazy search trees
	cctab  - More Prolog oriented tabling experiments, using Prolog nondetermism directly
	

## Running tests

From the shell prompt:

	```
	$ swipl -g 'consult(library(ccmisc/state_nondet2))'
	$ swipl -g 'consult(library(cctab/test_memo))'
	$ swipl -g 'consult(library(cctab/test_prob))'
	$ swipl -g 'consult(library(cctab/cctab))'
	```

## Implementation notes

### Copying continuations 

In order to run a continuation multiple times, or do other maniplulations,
it is often necessary to copy a continuation along with any variables with which
it interfaces with other parts of the program. In many cases, the pattern of
copying and calling is nicely captured by the semantics of lambda terms.
This is why I've included a couple of experimental minimal lambda libraries
here. They are closely modelled on Ulrich Neurmerkel's lambda library, but with
a little less checking and a different representation of free variables.

